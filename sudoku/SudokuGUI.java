/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sudoku;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 *
 * @author aamer
 */
public class SudokuGUI extends javax.swing.JFrame {

    /**
     * Creates new form SudokuGUI
     */
    public SudokuGUI() {
        initComponents();
        bannerPanel.removeAll();
        bannerPanel.setLayout(new GridLayout(1, 1));
        bannerPanel.add(bannerLabel);
        
        runBanner();
        
        PuzzlePanel.setVisible(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        PuzzlePanel = new javax.swing.JPanel();
        generateButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        bannerPanel = new javax.swing.JPanel();
        bannerLabel = new javax.swing.JLabel();
        discriptionField = new javax.swing.JTextField();
        gridLabelField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        yesButton = new javax.swing.JButton();
        noButton = new javax.swing.JButton();
        headingLabel = new javax.swing.JTextField();
        sizeErrorLabel = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();

        jScrollPane1.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PuzzlePanel.setBackground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout PuzzlePanelLayout = new javax.swing.GroupLayout(PuzzlePanel);
        PuzzlePanel.setLayout(PuzzlePanelLayout);
        PuzzlePanelLayout.setHorizontalGroup(
            PuzzlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PuzzlePanelLayout.setVerticalGroup(
            PuzzlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 449, Short.MAX_VALUE)
        );

        generateButton.setBackground(new java.awt.Color(255, 0, 0));
        generateButton.setFont(new java.awt.Font("Liberation Serif", 1, 36)); // NOI18N
        generateButton.setForeground(new java.awt.Color(255, 255, 255));
        generateButton.setText("Generate");
        generateButton.setToolTipText("Press To Generate Puzzle");
        generateButton.setBorder(new javax.swing.border.MatteBorder(null));
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        jTextField1.setBackground(new java.awt.Color(204, 255, 255));
        jTextField1.setFont(new java.awt.Font("Liberation Serif", 1, 36)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setToolTipText("Enter Size Here");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        bannerPanel.setBackground(new java.awt.Color(0, 0, 0));

        bannerLabel.setFont(new java.awt.Font("Liberation Serif", 3, 18)); // NOI18N
        bannerLabel.setForeground(new java.awt.Color(255, 0, 0));
        bannerLabel.setText("Sudoku Puzzle Game Is Developed By Mohammed Aamer Mohammed Farooq.SGGSIE&T. All Rights Are Reserved.");

        javax.swing.GroupLayout bannerPanelLayout = new javax.swing.GroupLayout(bannerPanel);
        bannerPanel.setLayout(bannerPanelLayout);
        bannerPanelLayout.setHorizontalGroup(
            bannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bannerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bannerPanelLayout.setVerticalGroup(
            bannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bannerPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(bannerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        discriptionField.setEditable(false);
        discriptionField.setFont(new java.awt.Font("Liberation Serif", 1, 24)); // NOI18N
        discriptionField.setToolTipText("Discription Is Shown Here");
        discriptionField.setBorder(new javax.swing.border.MatteBorder(null));
        discriptionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discriptionFieldActionPerformed(evt);
            }
        });

        gridLabelField.setEditable(false);
        gridLabelField.setBackground(new java.awt.Color(0, 0, 0));
        gridLabelField.setFont(new java.awt.Font("Liberation Serif", 1, 36)); // NOI18N
        gridLabelField.setForeground(new java.awt.Color(255, 255, 255));
        gridLabelField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridLabelField.setText("Enter The Srid Size");
        gridLabelField.setBorder(new javax.swing.border.MatteBorder(null));

        submitButton.setBackground(new java.awt.Color(0, 0, 255));
        submitButton.setFont(new java.awt.Font("Liberation Serif", 1, 48)); // NOI18N
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText("SUBMIT");
        submitButton.setToolTipText("Press To Submit The Puzzle");
        submitButton.setBorder(new javax.swing.border.MatteBorder(null));
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        yesButton.setBackground(new java.awt.Color(102, 255, 102));
        yesButton.setFont(new java.awt.Font("Liberation Serif", 1, 48)); // NOI18N
        yesButton.setText("YES");
        yesButton.setToolTipText("Press To Continue Or Use");
        yesButton.setBorder(new javax.swing.border.MatteBorder(null));
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        noButton.setBackground(new java.awt.Color(255, 0, 0));
        noButton.setFont(new java.awt.Font("Liberation Serif", 1, 48)); // NOI18N
        noButton.setForeground(new java.awt.Color(255, 255, 255));
        noButton.setText("NO");
        noButton.setToolTipText("Press No To Exit From Game");
        noButton.setBorder(new javax.swing.border.MatteBorder(null));
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });

        headingLabel.setEditable(false);
        headingLabel.setBackground(new java.awt.Color(0, 0, 0));
        headingLabel.setFont(new java.awt.Font("Liberation Serif", 1, 36)); // NOI18N
        headingLabel.setForeground(new java.awt.Color(255, 255, 255));
        headingLabel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        headingLabel.setText("{ SUDOKU PUZZLE GAME }");
        headingLabel.setToolTipText("Let's Play!!!");
        headingLabel.setBorder(new javax.swing.border.MatteBorder(null));

        sizeErrorLabel.setFont(new java.awt.Font("Liberation Serif", 1, 24)); // NOI18N
        sizeErrorLabel.setForeground(new java.awt.Color(255, 0, 0));

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(255, 255, 0));
        jTextField2.setFont(new java.awt.Font("Liberation Serif", 1, 15)); // NOI18N
        jTextField2.setText("Yellow-Cell : For input The Number");

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(255, 0, 0));
        jTextField3.setFont(new java.awt.Font("Liberation Serif", 1, 15)); // NOI18N
        jTextField3.setText("Red-Cell : Indicates Wrong Input Number");

        jTextField4.setEditable(false);
        jTextField4.setFont(new java.awt.Font("Liberation Serif", 1, 18)); // NOI18N
        jTextField4.setText("Result");

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(204, 153, 255));
        jTextField5.setFont(new java.awt.Font("Liberation Serif", 1, 15)); // NOI18N
        jTextField5.setText("Press \"NO\" For Exit");
        jTextField5.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sizeErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PuzzlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(discriptionField, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)
                            .addComponent(jTextField4)
                            .addComponent(jTextField5))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gridLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headingLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bannerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sizeErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(PuzzlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(yesButton)
                        .addComponent(noButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bannerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // TODO add your handling code here:
        
                PuzzlePanel.setVisible(true);

                
        try
        {
        gridSize = Integer.parseInt(jTextField1.getText());
        }
        catch(NumberFormatException e)
        {
            sizeErrorLabel.setText("Please Enter A Valid Size !!!");
        }
        
        s = new SudokuGUIHelper(gridSize);

        PuzzlePanel.removeAll();
        PuzzlePanel.setLayout(new GridLayout(gridSize, gridSize));

        cells = new JTextField[gridSize][gridSize];

        for (int i = 0; i < gridSize; i++) {
            for (int j = 0; j < gridSize; j++) {
                cells[i][j] = new JTextField(2);
                
               
                cells[i][j].setText(s.layout[i][j]);
                if(s.layout[i][j].isBlank()== false)
                {
                    cells[i][j].setEditable(false);
                }
                
                cells[i][j].setBackground(new java.awt.Color(204, 255, 255));
                cells[i][j].setFont(new java.awt.Font("Liberation Serif", 1, 24)); // NOI18N
                cells[i][j].setHorizontalAlignment(javax.swing.JTextField.CENTER);
                PuzzlePanel.add(cells[i][j]);
            }
        }

        PuzzlePanel.revalidate();
        PuzzlePanel.repaint();
        
                 for(int index =0;index<s.removeCellIndexCount.length;index=index+2)
                 {
                     cells[s.removeCellIndexCount[index]][s.removeCellIndexCount[index+1]].setBackground(Color.yellow);
                     index+=2;
                 }

        //s.solvePuzzle();

    }//GEN-LAST:event_generateButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        
        boolean checkEmpty = true;
        boolean checkNumber=true;
        int[] array = new int[s.removeCellIndexCount.length];
        int index = 0;
        String str = "";
        int Number =0;
        
        for(int i=0;i<gridSize;i++)
        {
            for(int j=0;j<gridSize;j++)
            {
                if(cells[i][j].getText().isBlank())
                {
                    array[index] = (i+1);
                    array[index+1]=(j+1);
                    index+=2;
                    checkEmpty = false;
                }
                else
                {
                    Number = Integer.parseInt(cells[i][j].getText().trim());
                    
                    if((Number >0 && Number<=gridSize)==false)
                    {
                        discriptionField.setText("The Number "+Number+" Should be in range 1 to "+gridSize);
                               checkNumber = false;
                                break;
                    }
                }
            }
        }
        if(checkEmpty == false && checkNumber == true)
        {
            for(int i =0 ; i<array.length;i=i+2)
            {
                str+=" ("+array[i] + ","+array[(i+1)]+") ";
            }
                jTextField4.setText(" Please Enter The Number In The Cell Given Below");
                discriptionField.setText(str);
                jTextField4.setBackground(Color.red);
        }
        
    
        if(checkEmpty && checkNumber)
        solvePuzzle();
    }//GEN-LAST:event_submitButtonActionPerformed

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        // TODO add your handling code here:
        if(puzzleSolvedResult)
        {
        s.level+=2;
        s.removeCells();
        }
        else
        {
                for(int count = 0, i=-1 ; count<s.removeCellIndexCount.length/2;count++)
                {

                s.layout[s.removeCellIndexCount[++i]][s.removeCellIndexCount[++i]]=" ";
                }
                
        }
        PuzzlePanel.removeAll();
        PuzzlePanel.setLayout(new GridLayout(gridSize, gridSize));

        cells = new JTextField[gridSize][gridSize];

       
        
        for (int i = 0; i < gridSize; i++) {
            for (int j = 0; j < gridSize; j++) {
                cells[i][j] = new JTextField(2);
                cells[i][j].setText(s.layout[i][j]);
                
                 if(s.layout[i][j].isBlank()== false)
                {
                    cells[i][j].setEditable(false);
                }
                 
                cells[i][j].setBackground(new java.awt.Color(204, 255, 255));
                cells[i][j].setFont(new java.awt.Font("Liberation Serif", 1, 24)); // NOI18N
                cells[i][j].setHorizontalAlignment(javax.swing.JTextField.CENTER);
                PuzzlePanel.add(cells[i][j]);
            }
        }
        
                 for(int index =0;index<s.removeCellIndexCount.length;index=index+2)
                 {
                     cells[s.removeCellIndexCount[index]][s.removeCellIndexCount[index+1]].setBackground(Color.yellow);
                     index+=2;
                 }

        PuzzlePanel.revalidate();
        PuzzlePanel.repaint();
        
    }//GEN-LAST:event_yesButtonActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_noButtonActionPerformed

    private void discriptionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discriptionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_discriptionFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SudokuGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PuzzlePanel;
    private javax.swing.JLabel bannerLabel;
    private javax.swing.JPanel bannerPanel;
    private javax.swing.JTextField discriptionField;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextField gridLabelField;
    private javax.swing.JTextField headingLabel;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JButton noButton;
    private javax.swing.JLabel sizeErrorLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton yesButton;
    // End of variables declaration//GEN-END:variables

    private int gridSize;
    JTextField[][] cells;
    SudokuGUIHelper s;

    private void runBanner() {
        Timer t = new Timer(500, new ActionListener() {

            int count = 0;
            String bannerText = bannerLabel.getText();
            int bannerLength = bannerText.length();

            public void actionPerformed(ActionEvent evt) {
                count += 1;
                count %= bannerLength;

                bannerLabel.setText(bannerText.substring(count) + bannerText.substring(0, count));
            }
        });

        t.start();
    }

    boolean puzzleSolvedResult;
    public void solvePuzzle() {

        for (int row = 0; row < gridSize; row++) {
            for (int col = 0; col < gridSize; col++) {

                s.layout[row][col] = cells[row][col].getText().trim();
                // System.out.println(s.layout[row][col]);
            }
        }

        for (int i = 0; i < 3; i++) {
            String[] element = s.layout[i];

        }

        boolean result = s.isValid(s.layout);
        puzzleSolvedResult = result;
        boolean getBox;
        
        if (result == true) {
            discriptionField.setText(" Congratulations !!! Puzzle is solved  ");
            jTextField4.setText("Press 'Yes' For Next Level");
            jTextField4.setBackground(Color.GREEN);
            
            for(int index =0;index<s.removeCellIndexCount.length;index=index+2)
            {
                 
                            cells[s.removeCellIndexCount[index]][s.removeCellIndexCount[index+1]].setBackground(Color.GREEN);
                        
            }
            
            
        } 
        else if (result == false) {
            discriptionField.setText(" Puzzle is not solved !!!");
             jTextField4.setText("Press 'Yes' For Replay The Level");
            jTextField4.setBackground(Color.red);
            
            for(int index =0;index<s.removeCellIndexCount.length;index=index+2)
            {
                 getBox = checkUniqueElement(s.layout[s.removeCellIndexCount[index]][s.removeCellIndexCount[index+1]],s.removeCellIndexCount[index],s.removeCellIndexCount[index+1]);
                        
                        if(getBox == false)
                        {
                            cells[s.removeCellIndexCount[index]][s.removeCellIndexCount[index+1]].setBackground(Color.red);
                        }
            }
            
        }
    }
    
    
    public boolean checkUniqueElement(String num,int row , int column)
    {
        int i,j;
        boolean result = true;
        
        for(j=0;j<gridSize;j++)
        {
            i = row;
            if(s.layout[i][j].equals(num) && j!=column)
            {
                result = false;
                break;
            }
        }
        
        for(i=0;i<gridSize;i++)
        {
            j = column;
            if(s.layout[i][j].equals(num) && i!=row)
            {
                result = false;
                break;
            }
        }
        return result;
    }

       
}
